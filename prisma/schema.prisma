generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Privileges {
  SUPERUSER
  ADMIN
  CREATOR
}

model Account {
  id         String      @id @default(uuid())
  password   String      @db.VarChar(250)
  twitter    String?     @db.VarChar(50)
  linkedin   String?     @db.VarChar(50)
  github     String?     @db.VarChar(50)
  // facebook   String?     @db.VarChar(50)
  // pintrest   String?     @db.VarChar(50)
  // instagram  String?     @db.VarChar(50)
  // relations
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @unique
  savedPosts Blogposts[]
  // default fields
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  // superuser actions
  disabled   Boolean     @default(false)
}

model Blogposts {
  // opengraph properties are extracted from the blogpost itself
  id              String     @id @default(uuid())
  n               BigInt     @default(autoincrement()) @db.BigInt
  title           String     @db.VarChar(150)
  slug            String     @unique
  metaDescription String?    @default("") @db.VarChar(200)
  excerpt         String?    @db.VarChar(150)
  content         String?
  banner          String?    @db.VarChar(255)
  banneralt       String?    @db.VarChar(255)
  minuteRead      Int?       @default(1) @db.SmallInt
  featured        Boolean?   @default(false) // top articles overall
  topPick         Boolean?   @default(false) // top articles in their category
  date            DateTime?  @db.Timestamp(0)
  commenting      Boolean    @default(true)
  // relations
  author          User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?
  topics          Topics?    @relation(fields: [topicsId], references: [id], onDelete: SetNull)
  topicsId        Int?
  tags            Tags[]
  savedBy         Account[]
  comments        Comments[]
  // defaults
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  published_at    DateTime?
  // published
  published       Boolean    @default(false)
  // superuser actions
  blocked         Boolean    @default(false)
}

model Comments {
  id         Int        @id @default(autoincrement())
  content    String     @db.VarChar(200)
  // relation
  comment    Blogposts? @relation(fields: [commentId], references: [id], onDelete: SetNull)
  commentId  String
  // defaults
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Images {
  id         String   @id @default(uuid())
  url        String   @db.VarChar(300)
  name       String   @default("") @db.VarChar(150)
  // default
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Videos {
  id         String   @id @default(uuid())
  url        String   @db.VarChar(300)
  name       String   @db.VarChar(150)
  // default
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id         String       @id @default(uuid())
  firstname  String       @db.VarChar(50)
  lastname   String?      @db.VarChar(50)
  username   String       @unique @db.VarChar(20)
  about      String?      @db.VarChar(200)
  dp         String?
  dpalt      String?
  email      String       @unique @db.VarChar(50)
  phone      String?      @unique @db.VarChar(15)
  roles      Privileges[]
  // relations
  blogposts  Blogposts[]
  account    Account?
  // default fields
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  // superuser actions
  adminGrant Boolean      @default(false)
}

model Tags {
  id              Int         @id @unique @default(autoincrement())
  tagname         String      @unique @db.VarChar(40)
  color           String?     @default("#3B82F6") @db.VarChar(7)
  metaDescription String      @default("") @db.VarChar(200)
  // opengraph
  ogTitle         String?     @default("") @db.VarChar(55)
  ogImg           String?     @default("https://lumbytes-general.s3.eu-west-1.amazonaws.com/defaultOG-medium.png") @db.VarChar(250)
  ogAlt           String?     @default("") @db.VarChar(55)
  // relations
  blogposts       Blogposts[]
  // defaults
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  published_at    DateTime?
  // published?
  published       Boolean     @default(true)
}

model Topics {
  id              Int         @id @default(autoincrement())
  topicname       String?     @unique @db.VarChar(50)
  metaDescription String?     @default("") @db.VarChar(200)
  ogimg           String?     @db.VarChar(250)
  ogalt           String?     @db.VarChar(30)
  // relations
  blogposts       Blogposts[]
  // defaults
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  published_at    DateTime?
  // published?
  published       Boolean     @default(false)
}
